{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["ownId","Math","random","App","state","endpoint","usernameInput","username","onlineObj","textChat","formRender","onSubmit","handleSubmit","type","placeholder","onChange","handleInputChange","value","autoFocus","event","preventDefault","setState","socket","io","on","data","emit","name","customId","target","handleChat","chatInput","chatSubmit","console","log","axios","post","this","then","response","catch","error","className","slice","reverse","map","item","key","clientId","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kVAKIA,EAAQ,SAAWC,KAAKC,SAEPC,E,2MAEnBC,MAAQ,CACNC,SAAU,wBAIVC,cAAe,GACfC,SAAU,GACVC,UAAW,GAEXC,SAAU,I,EA+GZC,WAAa,WAEP,MAA4B,KAAxB,EAAKN,MAAMG,SAEX,0BAAMI,SAAU,EAAKC,cACnB,2BACEC,KAAK,OACLC,YAAY,YACZC,SAAU,EAAKC,kBACfC,MAAO,EAAKb,MAAME,cAClBY,WAAS,IAEX,4BAAQL,KAAK,UAAb,OAOI,EAAKT,MAAMG,U,EAK3BK,aAAe,SAAAO,GACTA,EAAMC,iBACN,EAAKC,SAAS,CACZd,SAAU,EAAKH,MAAME,gBAIvB,IAAMgB,EAASC,IAAG,EAAKnB,MAAMC,UAC7BiB,EAAOE,GAAG,UAAW,SAAAC,GACnBH,EAAOI,KAAK,kBAAmB,CAC7BC,KAAM,EAAKvB,MAAMG,SACjBqB,SAAU5B,MAGdsB,EAAOE,GAAG,iBAAkB,SAAAC,GAC1B,EAAKJ,SAAS,CAAEb,UAAWiB,O,EAKnCT,kBAAoB,SAAAG,GACd,IAAMb,EAAgBa,EAAMU,OAAOZ,MACnC,EAAKI,SAAS,CAAEf,cAAeA,K,EAKnCwB,WAAa,SAAAX,GACX,IAAMY,EAAYZ,EAAMU,OAAOZ,MAC/B,EAAKI,SAAS,CAAEZ,SAAUsB,K,EAI5BC,WAAa,SAAAb,GACXA,EAAMC,iBAENa,QAAQC,IAAI,QAEGX,IAAG,EAAKnB,MAAMC,UAGtBqB,KAAK,YAAa,CACvBC,KAAM,SAQR,EAAKN,SAAS,CAAEZ,SAAU,M,mFAnLT,IAAD,OAIlB0B,IAAMC,KAAN,UAAcC,KAAKjC,MAAMC,UAFZ,CAAEsB,KAAM,SAGnBW,KAAK,SAASC,GACbN,QAAQC,IAAIK,KAGbC,MAAM,SAASC,GACdR,QAAQC,IAAIO,KAgBb,IAAMnB,EAASC,IAAGc,KAAKjC,MAAMC,UAmE7BiB,EAAOE,GAAG,UAAW,SAAAC,GACnBH,EAAOI,KAAK,kBAAmB,MAGjCJ,EAAOE,GAAG,iBAAkB,SAAAC,GAC1B,EAAKJ,SAAS,CAAEb,UAAWiB,Q,+BAuF7B,OACE,6BAEE,yBAAKiB,UAAU,SACZL,KAAK3B,cAGR,yBAAKgC,UAAU,UACb,4CACA,4BACGL,KAAKjC,MAAMI,UAAUmC,MAAM,GAAGC,UAAUC,IAAI,SAAAC,GAAI,OAC/C,wBAAIC,IAAKD,EAAKE,UACXF,EAAKnB,UAMd,6BAGE,0BAAMhB,SAAU0B,KAAKL,YACnB,2BACEnB,KAAK,OACLC,YAAY,YACZC,SAAUsB,KAAKP,WACfb,MAAOoB,KAAKjC,MAAMK,SAClBS,WAAS,IAEX,4BAAQL,KAAK,UAAb,e,GAvOmBoC,aCKbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,KAAK,SAAAwB,GACjCA,EAAaC,iB","file":"static/js/main.875eb72b.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport io from 'socket.io-client';\nimport axios from 'axios';\n\n\nlet ownId = \"User++\" + Math.random();\n\nexport default class App extends Component {\n\n  state = {\n    endpoint: \"http://localhost:8080\",\n    /*   endpoint: \"\", */\n\n\n    usernameInput: \"\",\n    username: \"\",\n    onlineObj: [],\n\n    textChat: \"\",\n\n  }\n\n\n\n  componentDidMount() {\n\nlet formFields = { name: \"sven\"}\n\n    axios.post(`${this.state.endpoint}`, formFields)\n     .then(function(response){\n       console.log(response);\n       //Perform action based on response\n   })\n     .catch(function(error){\n       console.log(error);\n       //Perform action based on error\n     });\n\n\n/*     axios.post(`${this.state.endpoint}/test/`, {\n      countValue: \"hello\"\n    }).then((response) => {\n      console.log(\"Data submitted successfully\");\n    }).catch((error) => {\n      console.log(\"got errr while posting data\", error);\n\n    });\n */\n\n\n      const socket = io(this.state.endpoint);\n\n      /* \n          const user = {\n            name: \"XXXXXXXXXXXXXXXXXXXXXXXXXx\"\n          }; */\n\n      /* \n          const response =  await axios.post(\n            `${this.state.endpoint}/users/`,\n            { example: 'data' },\n            { headers: { 'Content-Type': 'application/json' } }\n          )\n          console.log(response.data)\n       */\n\n      /*     axios.post(`${this.state.endpoint}/users/`, { user })\n            .then(res => {\n              console.log(\"oK?\");\n              console.log(res); */\n\n      /*         \n              console.log(res);\n              console.log(res.data); })*/\n\n\n\n\n\n\n      /*     axios.post(`${this.state.endpoint}/articles/`, {\n            title: \"article.title\",\n            summary: \"article.summary\",\n       \n        })\n        .then(function (response) {\n            console.log(response);\n            console.log(\"ok\");\n            \n        })\n        .catch(function (error) {\n          console.log(\"hekk\");\n          \n            console.log(error);\n        });\n       */\n\n      /*     axios.get(`${this.state.endpoint}/api/test`)\n            .then(res => {\n              const data = res.data;\n              console.log(data);\n            }) */\n\n\n      /*       axios.post(`${this.state.endpoint}/articles/`, {\n        title: 'bar'\n      }) */\n\n      /* const serverport = {\n        name: \"this.state.name\",\n        port: \"this.state.port\"\n      }\n      axios.post(`${this.state.endpoint}/api/test`, serverport)\n      .then(res => console.log(res.data)); */\n\n\n\n      socket.on(\"connect\", data => {\n        socket.emit(\"storeClientInfo\", {\n        });\n      });\n      socket.on(\"server message\", data => {\n        this.setState({ onlineObj: data });\n      });\n    }\n\n\n\n\n  formRender = () => {\n\n        if (this.state.username === \"\") {\n          return (\n            <form onSubmit={this.handleSubmit}>\n              <input\n                type=\"text\"\n                placeholder=\"Your Name\"\n                onChange={this.handleInputChange}\n                value={this.state.usernameInput}\n                autoFocus\n              />\n              <button type=\"submit\">\n                ok\n        </button>\n            </form>\n          )\n        }\n        else {\n          return (this.state.username)\n        }\n      }\n\n\n  handleSubmit = event => {\n        event.preventDefault();\n        this.setState({\n          username: this.state.usernameInput,\n/*       usernameInput: \"\"\n */    })\n        ///////////////\n        const socket = io(this.state.endpoint);\n        socket.on(\"connect\", data => {\n          socket.emit(\"storeClientInfo\", {\n            name: this.state.username,\n            customId: ownId\n          });\n        });\n        socket.on(\"server message\", data => {\n          this.setState({ onlineObj: data });\n        });\n\n      }\n\n  handleInputChange = event => {\n        const usernameInput = event.target.value;\n        this.setState({ usernameInput: usernameInput });\n      };\n\n\n\n    handleChat = event => {\n      const chatInput = event.target.value;\n      this.setState({ textChat: chatInput });\n    };\n\n\n    chatSubmit = event => {\n      event.preventDefault();\n\n      console.log(\"send\");\n\n      const socket = io(this.state.endpoint);\n\n\n      socket.emit(\"storeChat\", {\n        name: \"test\"\n\n\n\n      });\n\n\n\n      this.setState({ textChat: \"\" });\n\n    }\n\n\n    render() {\n      return (\n        <div>\n\n          <div className=\"login\">\n            {this.formRender()}\n          </div>\n\n          <div className=\"online\">\n            <h4>Users Online</h4>\n            <ul>\n              {this.state.onlineObj.slice(0).reverse().map(item => (\n                <li key={item.clientId}>\n                  {item.name}\n                </li>\n              ))}\n            </ul>\n          </div>\n\n          <div>\n\n\n            <form onSubmit={this.chatSubmit}>\n              <input\n                type=\"text\"\n                placeholder=\"Your Name\"\n                onChange={this.handleChat}\n                value={this.state.textChat}\n                autoFocus\n              />\n              <button type=\"submit\">\n                chat\n        </button>\n            </form>\n\n\n\n\n          </div>\n        </div>\n\n      )\n    }\n  }\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}